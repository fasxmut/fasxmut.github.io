<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book xmlns:rev="http://www.cs.rpi.edu/~gregod/boost/tools/doc/revision" id="learn_cpp_in_days" rev:last-revision="$Date: 2024/08/22 19:22:18 $">
  <title>Learn cpp in days</title>
  <article id="day_01_how_to_compile_cpp" rev:last-revision="$Date: 2024/08/22 19:22:18 $">
    <title>day-01: How to compile cpp</title>
    <bridgehead renderas="sect1" id="day_01_how_to_compile_cpp.h0">
      <phrase id="day_01_how_to_compile_cpp.role_cyan_day_01_how_to_compile_"/><link linkend="day_01_how_to_compile_cpp.role_cyan_day_01_how_to_compile_"><phrase role="cyan">day-01: how to compile cpp: Hello World!</phrase></link>
    </bridgehead>
    <para>
      Hello World: How to compile cpp/c++ code.
    </para>
    <bridgehead renderas="sect1" id="day_01_how_to_compile_cpp.h1">
      <phrase id="day_01_how_to_compile_cpp.role_cyan_how_to_build_and_run_c"/><link linkend="day_01_how_to_compile_cpp.role_cyan_how_to_build_and_run_c"><phrase role="cyan">How to build and run cpp code</phrase></link>
    </bridgehead>
    <bridgehead renderas="sect2" id="day_01_how_to_compile_cpp.h2">
      <phrase id="day_01_how_to_compile_cpp.get_cpp_compiler"/><link linkend="day_01_how_to_compile_cpp.get_cpp_compiler">Get
      cpp compiler</link>
    </bridgehead>
    <para>
      <emphasis role="bold">c++ compiler</emphasis>
    </para>
    <para>
      There are many c++ compiler nowadays, the most popular and complete c++ compilers
      are:
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          microsft visual studio (or can be called msvc, visualcpp) - <ulink url="https://visualstudio.microsoft.com/downloads">Home</ulink>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          gcc - <ulink url="https://gcc.gnu.org">Home</ulink>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          clang - <ulink url="https://clang.llvm.org">Home</ulink>
        </simpara>
      </listitem>
    </itemizedlist>
    <para>
      You can go to their homepage and find how to download and install.
    </para>
    <para>
      <emphasis role="bold">c++ compiler</emphasis>
    </para>
    <para>
      And also, c++ sycl compiler can build standard c++ code too:
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          Intel dpcpp/cpp compiler - <ulink url="https://software.intel.com/dpcpp">Home</ulink>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Adaptivecpp acpp compiler - <ulink url="https://adaptivecpp.github.io">Home</ulink>
        </simpara>
      </listitem>
    </itemizedlist>
    <bridgehead renderas="sect2" id="day_01_how_to_compile_cpp.h3">
      <phrase id="day_01_how_to_compile_cpp.use_a_code_editor"/><link linkend="day_01_how_to_compile_cpp.use_a_code_editor">Use
      a code editor</link>
    </bridgehead>
    <para>
      You can write c++ code with most text editors, there are many text editors
      you can find on Internet, such as notepad, featherpad, cpeditor, vim, kakoune,
      emacs, visual studio ide, etc.
    </para>
    <para>
      I am using kakoune kak editor, it is a good c++ code editor. (<ulink url="https://kakoune.org">Home</ulink>)
    </para>
    <bridgehead renderas="sect2" id="day_01_how_to_compile_cpp.h4">
      <phrase id="day_01_how_to_compile_cpp.hello_world_build_your_first_cpp"/><link linkend="day_01_how_to_compile_cpp.hello_world_build_your_first_cpp">Hello
      World! Build your first cpp code and run your generated program!</link>
    </bridgehead>
    <para>
      <emphasis role="bold">c++ code</emphasis>
    </para>
    <para>
      First, copy the following c++ code to a text editor, and save it as <emphasis role="bold">prog.cpp</emphasis> :
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"Hello World! This is a c++ program!"</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <para>
      <emphasis role="bold">Build it with gcc c++ compiler</emphasis>
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">g</phrase><phrase role="special">++</phrase> <phrase role="identifier">prog</phrase><phrase role="special">.</phrase><phrase role="identifier">cpp</phrase> <phrase role="special">-</phrase><phrase role="identifier">std</phrase><phrase role="special">=</phrase><phrase role="identifier">c</phrase><phrase role="special">++</phrase><phrase role="number">23</phrase> <phrase role="special">-</phrase><phrase role="identifier">o</phrase> <phrase role="identifier">prog</phrase>
</programlisting>
    <para>
      The generated program of the code is <emphasis role="bold">prog</emphasis>
      .
    </para>
    <para>
      <emphasis role="bold">Run the program</emphasis>
    </para>
    <para>
      Run:
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">./</phrase><phrase role="identifier">prog</phrase>
</programlisting>
    <para>
      Output:
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">Hello</phrase> <phrase role="identifier">World</phrase><phrase role="special">!</phrase> <phrase role="identifier">This</phrase> <phrase role="identifier">is</phrase> <phrase role="identifier">a</phrase> <phrase role="identifier">c</phrase><phrase role="special">++</phrase> <phrase role="identifier">program</phrase><phrase role="special">!</phrase>
</programlisting>
    <bridgehead renderas="sect1" id="day_01_how_to_compile_cpp.h5">
      <phrase id="day_01_how_to_compile_cpp.role_cyan_last"/><link linkend="day_01_how_to_compile_cpp.role_cyan_last"><phrase role="cyan">Last</phrase></link>
    </bridgehead>
    <para>
      In this article of this day, all you have to do is downloading compiler, installing
      compiler, copying above c++ code, building and running. I guess you can finish
      them within 10 minutes, you can continue to learn day-02 article in the same
      day now. So then, day-01 and day-02 articles can be finished in one day.
    </para>
    <para>
      <replaceable>Written on Aug 03, 2024</replaceable>
    </para>
    <bridgehead renderas="sect1" id="day_01_how_to_compile_cpp.h6">
      <phrase id="day_01_how_to_compile_cpp.role_cyan_back_to_index"/><link linkend="day_01_how_to_compile_cpp.role_cyan_back_to_index"><phrase role="cyan">Back to index</phrase></link>
    </bridgehead>
    <para>
      <ulink url=".">Index</ulink>
    </para>
  </article>
  <article id="day_02_std_cout" rev:last-revision="$Date: 2024/08/22 19:22:18 $">
    <title>day-02: std::cout</title>
    <bridgehead renderas="sect1" id="day_02_std_cout.h0">
      <phrase id="day_02_std_cout.role_cyan_let_s_build_the_very_b"/><link linkend="day_02_std_cout.role_cyan_let_s_build_the_very_b"><phrase role="cyan">Let's build the very base of cpp code at first</phrase></link>
    </bridgehead>
    <para>
      Let's build the very base of cpp code at first: feel cpp/c++ at the full scale.
    </para>
    <para>
      <emphasis role="bold">Write</emphasis>
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">kak</phrase> <phrase role="identifier">prog</phrase><phrase role="special">.</phrase><phrase role="identifier">cpp</phrase>
</programlisting>
    <para>
      (<ulink url="https://kakoune.org">kak editor</ulink>)
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"Hello World c++!"</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <para>
      <emphasis role="bold">Compile</emphasis>
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">g</phrase><phrase role="special">++</phrase> <phrase role="identifier">prog</phrase><phrase role="special">.</phrase><phrase role="identifier">cpp</phrase> <phrase role="special">-</phrase><phrase role="identifier">std</phrase><phrase role="special">=</phrase><phrase role="identifier">c</phrase><phrase role="special">++</phrase><phrase role="number">23</phrase> <phrase role="special">-</phrase><phrase role="identifier">o</phrase> <phrase role="identifier">prog</phrase>
</programlisting>
    <para>
      <emphasis role="bold">Run</emphasis>
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">./</phrase><phrase role="identifier">prog</phrase>
<phrase role="identifier">Hello</phrase> <phrase role="identifier">World</phrase> <phrase role="identifier">c</phrase><phrase role="special">++!</phrase>
</programlisting>
    <bridgehead renderas="sect1" id="day_02_std_cout.h1">
      <phrase id="day_02_std_cout.role_cyan_std_cout_the_very_base"/><link linkend="day_02_std_cout.role_cyan_std_cout_the_very_base"><phrase role="cyan">std::cout: the very base of cpp</phrase></link>
    </bridgehead>
    <para>
      <emphasis role="bold"><phrase role="red">std::cout</phrase></emphasis>
    </para>
    <para>
      What is std::cout ? Simply speeking, it is like a "print" "function"
      of c++, but in c++, std::cout is an object, it just prints something to your
      output console.
    </para>
    <para>
      <emphasis role="bold"><phrase role="red">&lt;&lt;</phrase></emphasis>
    </para>
    <para>
      <emphasis role="bold"><phrase role="red">operator&lt;&lt;</phrase></emphasis>
    </para>
    <para>
      What is <emphasis role="bold">&lt;&lt;</emphasis> ? it is a c++ operator. c++
      has many operators. If you have learned some mathematics, you should understand
      what operator is. But in c++, the <emphasis role="bold">operator</emphasis>
      concept is more generic than it in math. <phrase role="green">&lt;&lt;</phrase>
      is an ostream operator in the program above, <phrase role="red">we can call
      it <emphasis role="bold"><replaceable>operator&lt;&lt;</replaceable></emphasis>
      as its name for the next context of this article</phrase>.
    </para>
    <para>
      Can you imagine the math operator? A math operator has some inputs and some
      outputs. The <phrase role="green">operator&lt;&lt;</phrase> in c++ has some
      inputs and outputs too:
    </para>
    <para>
      ( In this example, <replaceable><phrase role="blue">std::cout &lt;&lt; "Hello
      World c++!"</phrase></replaceable> )
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          <emphasis role="bold"><phrase role="green">operator&lt;&lt;</phrase> has
          two inputs</emphasis>:
          <itemizedlist>
            <listitem>
              <simpara>
                std::cout
              </simpara>
            </listitem>
            <listitem>
              <simpara>
                "Hello World c++!"
              </simpara>
            </listitem>
          </itemizedlist>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <emphasis role="bold"><phrase role="green">operator&lt;&lt;</phrase> has
          one output</emphasis>:
          <itemizedlist>
            <listitem>
              <simpara>
                std::cout
              </simpara>
            </listitem>
          </itemizedlist>
        </simpara>
      </listitem>
    </itemizedlist>
    <para>
      Yes, you read that right, <emphasis role="bold">std::cout</emphasis> is the
      first input of <phrase role="green">operator&lt;&lt;</phrase>, <emphasis role="bold">"Hello
      World c++!"</emphasis> is the second input of <phrase role="green">operator&lt;&lt;</phrase>
      .
    </para>
    <para>
      And seriously, you read that right! <emphasis role="bold">std::cout</emphasis>
      is also the output of <phrase role="green">operator&lt;&lt;</phrase> .
    </para>
    <para>
      <emphasis role="bold">In c++</emphasis>, we call inputs <emphasis role="bold">arguments</emphasis>
      or <emphasis role="bold">parameters</emphasis>, and we call outputs <emphasis role="bold">return-values</emphasis>.
    </para>
    <para>
      <emphasis role="bold"><phrase role="red">step-analysis:</phrase></emphasis>
    </para>
    <para>
      <emphasis role="bold">1-&gt;)</emphasis>
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"Hello World c++!"</phrase><phrase role="special">);</phrase>
</programlisting>
    <para>
      Input <emphasis role="bold">std::cout</emphasis> and <emphasis role="bold">"Hello
      World c++!"</emphasis> to <phrase role="green">operator&lt;&lt;</phrase>,
      its output is <emphasis role="bold">std::cout</emphasis>, (we say that it returns
      <emphasis role="bold">std::cout</emphasis>) .
    </para>
    <para>
      <emphasis role="bold">2-&gt;)</emphasis>
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">((</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"Hello World c++!"</phrase><phrase role="special">)</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">);</phrase>
</programlisting>
    <para>
      The previous calling (the brackets on the inside) to <phrase role="green">operator&lt;&lt;</phrase>
      returns <emphasis role="bold">std::cout</emphasis>, and pass it to the next
      (the brackets on the outside) <phrase role="green">operator&lt;&lt;</phrase>
      as its first input, and the second input is <emphasis role="bold">std::endl</emphasis>,
      then at last, it returns <emphasis role="bold">std::cout</emphasis> again !
    </para>
    <para>
      <emphasis role="bold">3-&gt;)</emphasis>
    </para>
    <para>
      You might have guessed or thought it! You can chain the above process repeatedly
      for many times!
    </para>
    <para>
      <emphasis role="bold">Let's chain it !</emphasis>
    </para>
    <para>
      See:
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">((((</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"Hello"</phrase><phrase role="special">)</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"c++!"</phrase><phrase role="special">)</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="number">123</phrase><phrase role="special">)</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="number">6.5</phrase><phrase role="special">);</phrase>
</programlisting>
    <para>
      You can compile it, it compiles and run OK.
    </para>
    <para>
      <emphasis role="bold">4-&gt;)</emphasis>
    </para>
    <para>
      Are you annoyed by a lot of brackets? that's right. So I can tell you, you
      can omit those parentheses, the code will call <phrase role="green">operator&lt;&lt;</phrase>
      working from left to right correctly.
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"Hello"</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"c++!"</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="number">123</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="number">6.5</phrase><phrase role="special">;</phrase>
</programlisting>
    <para>
      <emphasis role="bold">Amazing, doesn't it!</emphasis> I think c++ <phrase role="green">operator&lt;&lt;</phrase>
      is more amazing than operator in mathematics !
    </para>
    <para>
      <emphasis role="bold"><phrase role="red">Second parameter of <replaceable>operator&lt;&lt;</replaceable></phrase></emphasis>
    </para>
    <para>
      Numbers, characters, strings, and many many values can be used as the second
      parameter of <phrase role="green">operator&lt;&lt;</phrase>, example:
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>            <phrase role="comment">// std::endl is a manipulator to insert newline character.</phrase>
<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="number">123</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>     <phrase role="comment">// 123 is an integer</phrase>
<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="number">32.33</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>   <phrase role="comment">// 32.33 is a decimal, we call it floating value in c++</phrase>
<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="char">'A'</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>     <phrase role="comment">// 'A' is a character.</phrase>
<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"A"</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>     <phrase role="comment">// "A" is a string.</phrase>
<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"About"</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase> <phrase role="comment">// "About" is a string.</phrase>
<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="char">'\n'</phrase><phrase role="special">;</phrase>                 <phrase role="comment">// '\n' is a newline character.</phrase>

<phrase role="comment">// You can chain all of them!</phrase>
<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="number">123</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="char">'\n'</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="number">32.33</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"\n"</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="char">'A'</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"A"</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"About"</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="char">'\n'</phrase><phrase role="special">;</phrase>
</programlisting>
    <para>
      <emphasis role="bold"><phrase role="red">First parameter of <replaceable>operator&lt;&lt;</replaceable></phrase></emphasis>
    </para>
    <para>
      Not only <emphasis role="bold">std::cout</emphasis>, but many c++ objects can
      be used as the first parameter of <phrase role="green">operator&lt;&lt;</phrase>,
      and even some kind of values can be used as the first parameter of <phrase role="green">operator&lt;&lt;</phrase> too, but that topic is too complicated
      and out of this article, you just have to focus <emphasis role="bold">std::cout</emphasis>
      now.
    </para>
    <bridgehead renderas="sect1" id="day_02_std_cout.h2">
      <phrase id="day_02_std_cout.role_cyan_main_framework"/><link linkend="day_02_std_cout.role_cyan_main_framework"><phrase role="cyan">main framework</phrase></link>
    </bridgehead>
    <para>
      A complete c++ program must have one entry point, which the program starts
      its exeution from, that's the <emphasis role="bold">main</emphasis> entry point.
      The code will run by listed orders according to <emphasis role="bold">main</emphasis>
      .
    </para>
    <bridgehead renderas="sect1" id="day_02_std_cout.h3">
      <phrase id="day_02_std_cout.role_cyan_header"/><link linkend="day_02_std_cout.role_cyan_header"><phrase role="cyan">Header</phrase></link>
    </bridgehead>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>
</programlisting>
    <para>
      <emphasis role="bold">std::cout</emphasis> is found from a file on your disk:
      <emphasis role="bold">iostream</emphasis>
    </para>
    <bridgehead renderas="sect1" id="day_02_std_cout.h4">
      <phrase id="day_02_std_cout.role_cyan_last"/><link linkend="day_02_std_cout.role_cyan_last"><phrase role="cyan">Last</phrase></link>
    </bridgehead>
    <para>
      It seems a bit complicated from this article, but it is very simple, you just
      only have to know how to use <emphasis role="bold">std::cout</emphasis>, if
      you can not understand it. After you use it again and again, you will understand
      it automatically.
    </para>
    <para>
      <replaceable>Written on Aug 03, 2024</replaceable>
    </para>
    <bridgehead renderas="sect1" id="day_02_std_cout.h5">
      <phrase id="day_02_std_cout.role_cyan_back_to_index"/><link linkend="day_02_std_cout.role_cyan_back_to_index"><phrase role="cyan">Back to index</phrase></link>
    </bridgehead>
    <para>
      <ulink url=".">Index</ulink>
    </para>
  </article>
  <article id="day_03_std_string" rev:last-revision="$Date: 2024/08/22 19:22:18 $">
    <title>day-03: std::string</title>
    <bridgehead renderas="sect1" id="day_03_std_string.h0">
      <phrase id="day_03_std_string.role_cyan_cpp_std_string"/><link linkend="day_03_std_string.role_cyan_cpp_std_string"><phrase role="cyan">cpp std::string</phrase></link>
    </bridgehead>
    <para>
      cpp/c++ std::string
    </para>
    <bridgehead renderas="sect1" id="day_03_std_string.h1">
      <phrase id="day_03_std_string.role_cyan_let_s_see_cpp_code_fir"/><link linkend="day_03_std_string.role_cyan_let_s_see_cpp_code_fir"><phrase role="cyan">let's see cpp code first</phrase></link>
    </bridgehead>
    <para>
      Let's see c++ code first
    </para>
    <para>
      <emphasis role="bold">Code</emphasis>
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">str</phrase> <phrase role="special">=</phrase> <phrase role="string">"This is a string"</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">str</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="char">'\n'</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">str</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

	<phrase role="identifier">str</phrase> <phrase role="special">=</phrase> <phrase role="string">"A string"</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">str</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">str</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"\n"</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <bridgehead renderas="sect1" id="day_03_std_string.h2">
      <phrase id="day_03_std_string.role_cyan_analysis"/><link linkend="day_03_std_string.role_cyan_analysis"><phrase role="cyan">analysis</phrase></link>
    </bridgehead>
    <bridgehead renderas="sect2" id="day_03_std_string.h3">
      <phrase id="day_03_std_string.cpp_string"/><link linkend="day_03_std_string.cpp_string">cpp
      string</link>
    </bridgehead>
    <para>
      You have learned from <link linkend="day_02_std_cout">day-02</link> that you
      can print a string using std::cout:
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"Hello World c++!"</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
</programlisting>
    <para>
      The c++ string is sent to <phrase role="green">operator&lt;&lt;</phrase> as
      its second parameter, and printed with <emphasis role="bold">std::cout</emphasis>
      . What is <phrase role="green">operator&lt;&lt;</phrase> ? it has been explained
      at <link linkend="day_02_std_cout">day-02</link> too.
    </para>
    <bridgehead renderas="sect2" id="day_03_std_string.h4">
      <phrase id="day_03_std_string.std_string"/><link linkend="day_03_std_string.std_string">std::string</link>
    </bridgehead>
    <bridgehead renderas="sect3" id="day_03_std_string.h5">
      <phrase id="day_03_std_string.blow"/><link linkend="day_03_std_string.blow">Blow</link>
    </bridgehead>
    <para>
      Did you have thought a question: How to code if I want to save a string at
      some place in the program instead of printing the string?
    </para>
    <para>
      std::string is the answer, it can create an object, and store the <replaceable>string</replaceable>
      into the object, without printing the string immediately.
    </para>
    <bridgehead renderas="sect3" id="day_03_std_string.h6">
      <phrase id="day_03_std_string.blow0"/><link linkend="day_03_std_string.blow0">Blow</link>
    </bridgehead>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">str</phrase> <phrase role="special">=</phrase> <phrase role="string">"This is a string"</phrase><phrase role="special">;</phrase>
</programlisting>
    <para>
      In this line, create an object named <emphasis role="bold">str</emphasis> using
      <emphasis role="bold">std::string</emphasis>, and then store "This is
      a string" into the <emphasis role="bold">str</emphasis> .
    </para>
    <para>
      <emphasis role="bold">Object</emphasis> - Like <emphasis role="bold">std::cout</emphasis>,
      which is an object; <emphasis role="bold">str</emphasis> is an object too.
      One difference of them is that the object <emphasis role="bold">std::cout</emphasis>
      is already created by the c++ system, but the object <emphasis role="bold">str</emphasis>
      is created by you.
    </para>
    <para>
      <emphasis role="bold">variable</emphasis> - <emphasis role="bold">str</emphasis>
      is an object, it has a name: <emphasis role="bold">str</emphasis>, we can also
      call it a variable.
    </para>
    <para>
      <emphasis role="bold">Initialize</emphasis> - Just like this line, when storing
      value on the same sentence as the variable is created, we call it <emphasis role="bold">initialize</emphasis>.
    </para>
    <para>
      You can also create an object or variable without initializing:
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">str2</phrase><phrase role="special">;</phrase>
</programlisting>
    <bridgehead renderas="sect3" id="day_03_std_string.h7">
      <phrase id="day_03_std_string.blow1"/><link linkend="day_03_std_string.blow1">Blow</link>
    </bridgehead>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">str</phrase> <phrase role="special">=</phrase> <phrase role="string">"A string"</phrase><phrase role="special">;</phrase>
</programlisting>
    <para>
      The <emphasis role="bold">str</emphasis> has already stored with a string
      <emphasis role="bold">"This is a string"</emphasis>. By this line,
      the old stored string will be cleared and <emphasis role="bold">str</emphasis>
      will be stored with a new string: <emphasis role="bold">"A string"</emphasis>
      .
    </para>
    <para>
      <emphasis role="bold">Assignment</emphasis> - Just like this line, when storing
      value on a variable which has already been created previously, we call it assignment.
    </para>
    <bridgehead renderas="sect3" id="day_03_std_string.h8">
      <phrase id="day_03_std_string.blow2"/><link linkend="day_03_std_string.blow2">Blow</link>
    </bridgehead>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">str</phrase><phrase role="special">;</phrase>
</programlisting>
    <para>
      You have learned from <link linkend="day_02_std_cout">day-02</link> that many
      objects and many values can be passed to <phrase role="green">operator&lt;&lt;</phrase>
      as the second parameter and printed with <emphasis role="bold">std::cout</emphasis>,
      the objects created by <emphasis role="bold">std::string</emphasis> can be
      too.
    </para>
    <bridgehead renderas="sect3" id="day_03_std_string.h9">
      <phrase id="day_03_std_string.blow3"/><link linkend="day_03_std_string.blow3">Blow</link>
    </bridgehead>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">str</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">();</phrase>
<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">str</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">();</phrase>
</programlisting>
    <para>
      See <emphasis role="bold">str.size()</emphasis>, that means we call a method
      <emphasis role="bold">.size()</emphasis> from the object <emphasis role="bold">str</emphasis>,
      the calling will return an integer value to tell us how many characters that
      the string has which the object stored.
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          "This is a string" - it has <emphasis role="bold">16</emphasis>
          characters.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          "A string" - it has <emphasis role="bold">8</emphasis> characters.
        </simpara>
      </listitem>
    </itemizedlist>
    <para>
      It requires that, the object has a method <emphasis role="bold">.size()</emphasis>,
      in other words, the class <emphasis role="bold">std::string</emphasis> has
      already defined the method <emphasis role="bold">.size()</emphasis> .
    </para>
    <bridgehead renderas="sect1" id="day_03_std_string.h10">
      <phrase id="day_03_std_string.role_cyan_header"/><link linkend="day_03_std_string.role_cyan_header"><phrase role="cyan">Header</phrase></link>
    </bridgehead>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase>
</programlisting>
    <para>
      <emphasis role="bold">std::string</emphasis> is declared and defined in a file
      on your disk: string .
    </para>
    <bridgehead renderas="sect1" id="day_03_std_string.h11">
      <phrase id="day_03_std_string.role_cyan_last"/><link linkend="day_03_std_string.role_cyan_last"><phrase role="cyan">Last</phrase></link>
    </bridgehead>
    <para>
      This article only has three points, please don't feel stress:
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          Create an object of std::string:
          <itemizedlist>
            <listitem>
              <simpara>
                <emphasis role="bold">std::string str = "This is a string";</emphasis>
              </simpara>
            </listitem>
          </itemizedlist>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Store new string to the object:
          <itemizedlist>
            <listitem>
              <simpara>
                <emphasis role="bold">str = "A string";</emphasis>
              </simpara>
            </listitem>
          </itemizedlist>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The object has a method <emphasis role="bold">.size()</emphasis>, which
          returns an integer value to tell us how many characters the string has
          that it stores:
          <itemizedlist>
            <listitem>
              <simpara>
                <emphasis role="bold">str.size();</emphasis>
              </simpara>
            </listitem>
          </itemizedlist>
        </simpara>
      </listitem>
    </itemizedlist>
    <para>
      <replaceable>Written on Aug 03, 2024</replaceable>
    </para>
    <bridgehead renderas="sect1" id="day_03_std_string.h12">
      <phrase id="day_03_std_string.role_cyan_back_to_index"/><link linkend="day_03_std_string.role_cyan_back_to_index"><phrase role="cyan">Back to index</phrase></link>
    </bridgehead>
    <para>
      <ulink url=".">Index</ulink>
    </para>
  </article>
  <article id="day_04_cpp_object_oriented" rev:last-revision="$Date: 2024/08/22 19:22:18 $">
    <title>day-04: cpp object oriented</title>
    <bridgehead renderas="sect1" id="day_04_cpp_object_oriented.h0">
      <phrase id="day_04_cpp_object_oriented.role_cyan_cpp_object_oriented_pr"/><link linkend="day_04_cpp_object_oriented.role_cyan_cpp_object_oriented_pr"><phrase role="cyan">cpp object oriented programming</phrase></link>
    </bridgehead>
    <para>
      cpp/c++ object oriented programming
    </para>
    <bridgehead renderas="sect2" id="day_04_cpp_object_oriented.h1">
      <phrase id="day_04_cpp_object_oriented.cpp_object_oriented"/><link linkend="day_04_cpp_object_oriented.cpp_object_oriented">cpp
      object oriented</link>
    </bridgehead>
    <para>
      cpp/c++ object oriented programming treats the real world entities set as a
      whole concept, and then creates many objects according that concept.
    </para>
    <bridgehead renderas="sect2" id="day_04_cpp_object_oriented.h2">
      <phrase id="day_04_cpp_object_oriented.cpp_class"/><link linkend="day_04_cpp_object_oriented.cpp_class">cpp
      class</link>
    </bridgehead>
    <para>
      The concept of the entities set is called class in c++, by keyword <emphasis role="bold">class</emphasis> .
    </para>
    <bridgehead renderas="sect2" id="day_04_cpp_object_oriented.h3">
      <phrase id="day_04_cpp_object_oriented.cpp_object"/><link linkend="day_04_cpp_object_oriented.cpp_object">cpp
      object</link>
    </bridgehead>
    <para>
      Every entity created by c++ class is called object.
    </para>
    <bridgehead renderas="sect2" id="day_04_cpp_object_oriented.h4">
      <phrase id="day_04_cpp_object_oriented.object_oriented_features"/><link linkend="day_04_cpp_object_oriented.object_oriented_features">object
      oriented features</link>
    </bridgehead>
    <itemizedlist>
      <listitem>
        <simpara>
          <emphasis role="bold">Inheritance</emphasis> - A c++ class can inherit
          another class B, we say <replaceable>"A is derived from B"</replaceable>
          .
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <emphasis role="bold">Encapsulation</emphasis> - c++ class has three kind
          of access control: <replaceable>private, protected, public</replaceable>,
          the sensitive data can be made hidden by private or protected .
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <emphasis role="bold">Polymorphism</emphasis> - c++ polymorphism is a language
          skill that makes a single action to have the ability to perform many different
          tasks.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <emphasis role="bold">Attributes</emphasis> - c++ class attributes are
          data members, which are the variables the class owns.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <emphasis role="bold">Method</emphasis> - A method is an action which the
          c++ class owns.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <emphasis role="bold">Constructor</emphasis> - A c++ construtor is an action
          too, which is executed when an object is created by it.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <emphasis role="bold">Destrutor</emphasis> - A c++ destructor is an action
          too, which is executed when an object of the class is destroyed.
        </simpara>
      </listitem>
    </itemizedlist>
    <bridgehead renderas="sect1" id="day_04_cpp_object_oriented.h5">
      <phrase id="day_04_cpp_object_oriented.role_cyan_start_from_example"/><link linkend="day_04_cpp_object_oriented.role_cyan_start_from_example"><phrase role="cyan">Start
      from example</phrase></link>
    </bridgehead>
    <para>
      Save code as <emphasis role="bold">chat-robot.cpp</emphasis>
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// This is a comment line.</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">chat_robot</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="keyword">void</phrase> <phrase role="identifier">speak</phrase><phrase role="special">()</phrase>
	<phrase role="special">{</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"Hello, I am a chat robot, please talk to me."</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="identifier">chat_robot</phrase> <phrase role="identifier">robot_no_1</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">robot_no_1</phrase><phrase role="special">.</phrase><phrase role="identifier">speak</phrase><phrase role="special">();</phrase>

	<phrase role="keyword">auto</phrase> <phrase role="identifier">robot_no_2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">chat_robot</phrase><phrase role="special">{};</phrase>
	<phrase role="identifier">robot_no_2</phrase><phrase role="special">.</phrase><phrase role="identifier">speak</phrase><phrase role="special">();</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <para>
      Compile and run:
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude">$ g++ chat-robot.cpp -std=c++23 -o chat-robot
$ ./chat-robot
Hello, I am a chat robot, please talk to me.
Hello, I am a chat robot, please talk to me.
</programlisting>
    <bridgehead renderas="sect2" id="day_04_cpp_object_oriented.h6">
      <phrase id="day_04_cpp_object_oriented.class_definition"/><link linkend="day_04_cpp_object_oriented.class_definition">class
      definition</link>
    </bridgehead>
    <para>
      You can see that, the program has a class, its name is <phrase role="blue">chat_robot</phrase>
      .
    </para>
    <para>
      The class <phrase role="blue">chat_robot</phrase> has a method: <phrase role="blue">speak</phrase>
      .
    </para>
    <bridgehead renderas="sect2" id="day_04_cpp_object_oriented.h7">
      <phrase id="day_04_cpp_object_oriented.object_definition"/><link linkend="day_04_cpp_object_oriented.object_definition">object
      definition</link>
    </bridgehead>
    <para>
      Object definition, can be also called object creation.
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">chat_robot</phrase> <phrase role="identifier">robot_no_1</phrase><phrase role="special">;</phrase>

<phrase role="keyword">auto</phrase> <phrase role="identifier">robot_no_2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">chat_robot</phrase><phrase role="special">{};</phrase>
</programlisting>
    <para>
      In this example, two ways are used to create object of the class <phrase role="blue">chat_robot</phrase>
      as above. Two objects are created: <phrase role="blue">robot_no_1</phrase>,
      and <phrase role="blue">robot_no_2</phrase> .
    </para>
    <para>
      The word <emphasis role="bold">auto</emphasis> is very powerful and simple
      in c++ .
    </para>
    <bridgehead renderas="sect2" id="day_04_cpp_object_oriented.h8">
      <phrase id="day_04_cpp_object_oriented.method_calling"/><link linkend="day_04_cpp_object_oriented.method_calling">Method
      calling</link>
    </bridgehead>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">robot_no_1</phrase><phrase role="special">.</phrase><phrase role="identifier">speak</phrase><phrase role="special">();</phrase>
</programlisting>
    <para>
      The above code shows how to call the method <emphasis role="bold">.speak()</emphasis>
      with the object <emphasis role="bold">robot_no_1</emphasis> .
    </para>
    <bridgehead renderas="sect1" id="day_04_cpp_object_oriented.h9">
      <phrase id="day_04_cpp_object_oriented.role_cyan_last"/><link linkend="day_04_cpp_object_oriented.role_cyan_last"><phrase role="cyan">Last</phrase></link>
    </bridgehead>
    <para>
      You might read many information about c++ class from this article, but please
      do not feel stress. You only need to focus on the features that the example
      shows, and other information can be ignored and will be explained in next articles.
      As the example demonstrates, <emphasis role="bold">you only need to focus on
      four points from this article</emphasis>:
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          class definition
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Simple method definition
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Object creation
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Call method
        </simpara>
      </listitem>
    </itemizedlist>
    <para>
      And at last, please care and remember the word <phrase role="blue">auto</phrase>,
      you do not have to understand auto now .
    </para>
    <para>
      <replaceable>Written on Aug 04, 2024</replaceable>
    </para>
    <bridgehead renderas="sect1" id="day_04_cpp_object_oriented.h10">
      <phrase id="day_04_cpp_object_oriented.role_cyan_back_to_index"/><link linkend="day_04_cpp_object_oriented.role_cyan_back_to_index"><phrase role="cyan">Back to index</phrase></link>
    </bridgehead>
    <para>
      <ulink url=".">Index</ulink>
    </para>
  </article>
  <article id="day_05_cpp_class_attribute" rev:last-revision="$Date: 2024/08/22 19:22:18 $">
    <title>day-05: cpp class attribute</title>
    <bridgehead renderas="sect1" id="day_05_cpp_class_attribute.h0">
      <phrase id="day_05_cpp_class_attribute.role_cyan_cpp_class_attribute"/><link linkend="day_05_cpp_class_attribute.role_cyan_cpp_class_attribute"><phrase role="cyan">cpp class attribute</phrase></link>
    </bridgehead>
    <para>
      cpp/c++ class attributes
    </para>
    <bridgehead renderas="sect2" id="day_05_cpp_class_attribute.h1">
      <phrase id="day_05_cpp_class_attribute.class_attributes"/><link linkend="day_05_cpp_class_attribute.class_attributes">class
      attributes</link>
    </bridgehead>
    <para>
      A c++ class attribute is a variable that belongs to that class. Attribute can
      be simply thought as feature . But why is a variable of a class called attribute
      ? You can compare attribute with method to understand it.
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">class</phrase> <phrase role="identifier">chat_robot</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">name</phrase> <phrase role="special">=</phrase> <phrase role="string">"chat_robot"</phrase><phrase role="special">;</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="keyword">void</phrase> <phrase role="identifier">speak</phrase><phrase role="special">()</phrase>
	<phrase role="special">{</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"Please talk to me, I am a chat robot!"</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
<phrase role="special">};</phrase>
</programlisting>
    <para>
      The class <emphasis role="bold">chat_robot</emphasis> has an attribute: <phrase role="blue">name</phrase> ;
    </para>
    <para>
      and it has a method: <phrase role="blue">speak</phrase> .
    </para>
    <para>
      Now think of it:
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          the attribute <emphasis role="bold">name</emphasis> can store a string:
          "<emphasis role="bold">chat_robot</emphasis>",
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          and the the method <emphasis role="bold">speak</emphasis> can perform an
          action: <phrase role="green">print some information using</phrase> <phrase role="blue">std::cout</phrase> .
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          but the method can not store attribute information that belongs to the
          class.
        </simpara>
      </listitem>
    </itemizedlist>
    <para>
      I think you understand why it is called attribute now.
    </para>
    <bridgehead renderas="sect2" id="day_05_cpp_class_attribute.h2">
      <phrase id="day_05_cpp_class_attribute.how_to_change_the_class_attribut"/><link linkend="day_05_cpp_class_attribute.how_to_change_the_class_attribut">How to
      change the class attribute value, -&gt; <phrase role="green">setter</phrase></link>
    </bridgehead>
    <para>
      You can add another method to change the attribute value of the class:
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="keyword">void</phrase> <phrase role="identifier">set_name</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">new_name</phrase><phrase role="special">)</phrase>
	<phrase role="special">{</phrase>
		<phrase role="identifier">name</phrase> <phrase role="special">=</phrase> <phrase role="identifier">new_name</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
</programlisting>
    <para>
      You see that a method can have input arguments, and the input is assigned to
      attribute:
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">name</phrase> <phrase role="special">=</phrase> <phrase role="identifier">new_name</phrase><phrase role="special">;</phrase>
</programlisting>
    <bridgehead renderas="sect2" id="day_05_cpp_class_attribute.h3">
      <phrase id="day_05_cpp_class_attribute.how_to_fetch_the_attribute_value"/><link linkend="day_05_cpp_class_attribute.how_to_fetch_the_attribute_value">How to
      fetch the attribute value from the class, -&gt; <phrase role="green">getter</phrase></link>
    </bridgehead>
    <para>
      You can add another method to get the attribute value of the class:
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">get_name</phrase><phrase role="special">()</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">return</phrase> <phrase role="identifier">name</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
</programlisting>
    <para>
      You see that the attribute value is returned by <phrase role="blue">return</phrase>
      statement:
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">return</phrase> <phrase role="identifier">name</phrase><phrase role="special">;</phrase>
</programlisting>
    <bridgehead renderas="sect1" id="day_05_cpp_class_attribute.h4">
      <phrase id="day_05_cpp_class_attribute.role_cyan_full_example_put_all_o"/><link linkend="day_05_cpp_class_attribute.role_cyan_full_example_put_all_o"><phrase role="cyan">Full example: put all of them together</phrase></link>
    </bridgehead>
    <para>
      Save as <emphasis role="bold">chat_robot.cpp</emphasis>
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// cpp/c++ code</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">chat_robot</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">name</phrase> <phrase role="special">=</phrase> <phrase role="string">"chat_robot"</phrase><phrase role="special">;</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="keyword">void</phrase> <phrase role="identifier">speak</phrase><phrase role="special">()</phrase>
	<phrase role="special">{</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"Please talk to me, I am a chat robot!"</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
	<phrase role="keyword">void</phrase> <phrase role="identifier">set_name</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">new_name</phrase><phrase role="special">)</phrase>
	<phrase role="special">{</phrase>
		<phrase role="identifier">name</phrase> <phrase role="special">=</phrase> <phrase role="identifier">new_name</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">get_name</phrase><phrase role="special">()</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">return</phrase> <phrase role="identifier">name</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">auto</phrase> <phrase role="identifier">robot_no_1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">chat_robot</phrase><phrase role="special">{};</phrase>
	<phrase role="identifier">robot_no_1</phrase><phrase role="special">.</phrase><phrase role="identifier">speak</phrase><phrase role="special">();</phrase>

	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"name: "</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">robot_no_1</phrase><phrase role="special">.</phrase><phrase role="identifier">get_name</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

	<phrase role="identifier">robot_no_1</phrase><phrase role="special">.</phrase><phrase role="identifier">set_name</phrase><phrase role="special">(</phrase><phrase role="string">"robot"</phrase><phrase role="special">);</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"name: "</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">robot_no_1</phrase><phrase role="special">.</phrase><phrase role="identifier">get_name</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <para>
      Compile and run:
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude">$ g++ chat-robot.cpp -std=c++23 -o chat-robot
$ ./chat-robot
Please talk to me, I am a chat robot!
name: chat_robot
name: robot
</programlisting>
    <bridgehead renderas="sect1" id="day_05_cpp_class_attribute.h5">
      <phrase id="day_05_cpp_class_attribute.role_cyan_last"/><link linkend="day_05_cpp_class_attribute.role_cyan_last"><phrase role="cyan">Last</phrase></link>
    </bridgehead>
    <para>
      This article explained the attributes of cpp class, it has only three points,
      no stress:
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          Declare class attribute
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          How to change attribute value with method
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          How to get attribute value with method
        </simpara>
      </listitem>
    </itemizedlist>
    <para>
      <replaceable>Written on Aug 04, 2024</replaceable>
    </para>
    <bridgehead renderas="sect1" id="day_05_cpp_class_attribute.h6">
      <phrase id="day_05_cpp_class_attribute.role_cyan_back_to_index"/><link linkend="day_05_cpp_class_attribute.role_cyan_back_to_index"><phrase role="cyan">Back to index</phrase></link>
    </bridgehead>
    <para>
      <ulink url=".">Index</ulink>
    </para>
  </article>
  <article id="day_06_private_protected_public" rev:last-revision="$Date: 2024/08/22 19:22:18 $">
    <title>day-06: private protected public</title>
    <bridgehead renderas="sect1" id="day_06_private_protected_public.h0">
      <phrase id="day_06_private_protected_public.role_cyan_cpp_object_oriented_en"/><link linkend="day_06_private_protected_public.role_cyan_cpp_object_oriented_en"><phrase role="cyan">cpp object-oriented encapsulation: private protected public</phrase></link>
    </bridgehead>
    <para>
      cpp/c++ object-oriented encapsulation: private protected public
    </para>
    <para>
      You have already saw the <phrase role="blue">public</phrase> usage case from
      previous articles, <phrase role="blue">private</phrase> and <phrase role="blue">protected</phrase>
      have the same way with <phrase role="blue">public</phrase> .
    </para>
    <bridgehead renderas="sect2" id="day_06_private_protected_public.h1">
      <phrase id="day_06_private_protected_public.private"/><link linkend="day_06_private_protected_public.private">private</link>
    </bridgehead>
    <itemizedlist>
      <listitem>
        <simpara>
          The <phrase role="green">attributes</phrase> or <phrase role="green">methods</phrase>
          that are marked private can be accessed from the inside of the class only,
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          but they can not be accessed from the inside of the derived class,
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          and they can not be accessed from the outside of the class.
        </simpara>
      </listitem>
    </itemizedlist>
    <bridgehead renderas="sect2" id="day_06_private_protected_public.h2">
      <phrase id="day_06_private_protected_public.protected"/><link linkend="day_06_private_protected_public.protected">protected</link>
    </bridgehead>
    <itemizedlist>
      <listitem>
        <simpara>
          The <phrase role="green">attributes</phrase> or <phrase role="green">methods</phrase>
          that are marked protected can be accessed from the inside of the class,
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          and they can be accessed from the inside of the derived class,
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          but they can not be accessed from the outside of the class.
        </simpara>
      </listitem>
    </itemizedlist>
    <bridgehead renderas="sect2" id="day_06_private_protected_public.h3">
      <phrase id="day_06_private_protected_public.public"/><link linkend="day_06_private_protected_public.public">public</link>
    </bridgehead>
    <itemizedlist>
      <listitem>
        <simpara>
          The <phrase role="green">attributes</phrase> or <phrase role="green">methods</phrase>
          that are marked public can be accessed from the inside of the class,
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          and they can be accessed from the inside of the derived class,
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          and they can be accessed from the outside of the class.
        </simpara>
      </listitem>
    </itemizedlist>
    <bridgehead renderas="sect3" id="day_06_private_protected_public.h4">
      <phrase id="day_06_private_protected_public.role_green_derived_class_inherit"/><link linkend="day_06_private_protected_public.role_green_derived_class_inherit">-&gt;
      <phrase role="green">derived class: inheritance</phrase></link>
    </bridgehead>
    <para>
      Inheritance will be explained in the next article.
    </para>
    <bridgehead renderas="sect1" id="day_06_private_protected_public.h5">
      <phrase id="day_06_private_protected_public.role_cyan_see_example"/><link linkend="day_06_private_protected_public.role_cyan_see_example"><phrase role="cyan">See example</phrase></link>
    </bridgehead>
    <para>
      Save as <emphasis role="bold">brick.cpp</emphasis>
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">brick</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">name1</phrase><phrase role="special">;</phrase>
<phrase role="keyword">protected</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">name2</phrase><phrase role="special">;</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">name3</phrase><phrase role="special">;</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="keyword">void</phrase> <phrase role="identifier">set_names</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">n1</phrase><phrase role="special">,</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">n2</phrase><phrase role="special">,</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">n3</phrase><phrase role="special">)</phrase>
	<phrase role="special">{</phrase>
	<phrase role="comment">// access name1, name2, name3 from the inside of the class.</phrase>
		<phrase role="identifier">name1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">n1</phrase><phrase role="special">;</phrase>
		<phrase role="identifier">name2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">n2</phrase><phrase role="special">;</phrase>
		<phrase role="identifier">name3</phrase> <phrase role="special">=</phrase> <phrase role="identifier">n3</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">get_name1</phrase><phrase role="special">()</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">return</phrase> <phrase role="identifier">name1</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">auto</phrase> <phrase role="identifier">a_brick</phrase> <phrase role="special">=</phrase> <phrase role="identifier">brick</phrase><phrase role="special">{};</phrase>

	<phrase role="identifier">a_brick</phrase><phrase role="special">.</phrase><phrase role="identifier">set_names</phrase><phrase role="special">(</phrase><phrase role="string">"A"</phrase><phrase role="special">,</phrase> <phrase role="string">"b"</phrase><phrase role="special">,</phrase> <phrase role="string">"c"</phrase><phrase role="special">);</phrase>

	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">nm1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">a_brick</phrase><phrase role="special">.</phrase><phrase role="identifier">get_name1</phrase><phrase role="special">();</phrase>

	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">nm1</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

	<phrase role="comment">// access attribute name3 from the outside of the class.</phrase>
	<phrase role="identifier">a_brick</phrase><phrase role="special">.</phrase><phrase role="identifier">name3</phrase> <phrase role="special">=</phrase> <phrase role="string">"D"</phrase><phrase role="special">;</phrase>

	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">a_brick</phrase><phrase role="special">.</phrase><phrase role="identifier">name3</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <para>
      Compile and run:
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude">$ g++ brick.cpp -std=c++23 -o brick
$ ./brick
A
D
</programlisting>
    <note>
      <para>
        name1 can be accessed from the inside of the class <emphasis role="bold">brick</emphasis>
        only, because it is private .
      </para>
      <para>
        name2 can be accessed from the inside of the class <emphasis role="bold">brick</emphasis>,
        and from the inside of <emphasis role="bold">derived class of brick</emphasis>,
        because it is protected, but can not be accessed from the outside of the
        class .
      </para>
      <para>
        name3, set_names, get_name1 can be accessed from the inside of the class
        <emphasis role="bold">brick</emphasis>, the inside of the <emphasis role="bold">derived
        class of brick</emphasis>, and <emphasis role="bold">outside of the class</emphasis>,
        because they are public .
      </para>
    </note>
    <para>
      Inheritance or (derived class) will be explained in the next article.
    </para>
    <bridgehead renderas="sect1" id="day_06_private_protected_public.h6">
      <phrase id="day_06_private_protected_public.role_cyan_last"/><link linkend="day_06_private_protected_public.role_cyan_last"><phrase role="cyan">Last</phrase></link>
    </bridgehead>
    <para>
      Do not feel stress, this article only has three points:
    </para>
    <para>
      private
    </para>
    <para>
      protected
    </para>
    <para>
      public
    </para>
    <para>
      <replaceable>Written on Aug 04, 2024</replaceable>
    </para>
    <bridgehead renderas="sect1" id="day_06_private_protected_public.h7">
      <phrase id="day_06_private_protected_public.role_cyan_back_to_index"/><link linkend="day_06_private_protected_public.role_cyan_back_to_index"><phrase role="cyan">Back
      to index</phrase></link>
    </bridgehead>
    <para>
      <ulink url=".">Index</ulink>
    </para>
  </article>
  <bridgehead renderas="sect1" id="learn_cpp_in_days.h0">
    <phrase id="learn_cpp_in_days.role_cyan_cpp_tutorial_learn_cpp"/><link linkend="learn_cpp_in_days.role_cyan_cpp_tutorial_learn_cpp"><phrase role="cyan">cpp Tutorial: Learn cpp in days</phrase></link>
  </bridgehead>
  <para>
    c++ Tutorial: Learn c++ in some days, less than 100 days.
  </para>
  <para>
    Powered by <ulink url="https://cppfx.xyz">cppfx.xyz</ulink>
  </para>
</book>
