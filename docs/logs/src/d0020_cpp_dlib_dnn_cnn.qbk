[article cpp dlib dnn cnn
	[quickbook 1.7]
]

c++ dlib dnn cnn - Posted on Jun 8, 2024 - See [@http://dlib.net] - [@https://cppfx.xyz/logs Logs Home] - d0020

[h1 [role cyan cpp dlib dnn cnn]]

CNN - The convolutional neural network of c++ dlib.

c++ dlib deep neural network, machine learning, convolutional neural network.

[h1 [role cyan Neural Network Layers]]

CNN Layers

c++ dlib layer is also called SUBNET, a subnet has its own subnet, and a subnet can be used as subnet of other subnet.

[h2 Images or samples]

Images or samples are stored in dlib::matrx .

[!c++]
```
using image_type = dlib::matrix<dlib::rgb_pixel>;

using sample_type = dlib::matrix<unsignd long>;
```

[h2 Input Layer]

Input image data. Input layer is the first layer of dlib nn layers.

[!c++]
```
using input_layer = dlib::input<image_type>;
```

[h2 Convolutional Layer]

Algorithm: Sum \[ f(x) g(a-x) \]

[!c++]
```
using con_layer = dlib::con<
	2,	// num_filters
	4,	// nr
	4,	// nc
	4,	// stride_y
	4,	// stride_x
	input_layer	// subnet
>;
```

In this example, input_layer is used as the subnet of con_layer.

[h2 ReLU Layer]

Algorithm: Max (0, x)

[!c++]
```
using relu_layer = dlib::relu<con_layer>;
```

In this example, con_layer is used as the subnet of relu_layer.

[h2 Pooling Layer]

[h3 Max Pool]

Scan each area of an image and take every max value.

[h3 AVG Pool]

Scan each area of an image and take every average value.

[!c++]
```
using max_pool_layer = dlib::max_pool<
	3,	// nr
	3,	// nc
	3,	// stride_y
	3,	// stride_x
	relu_layer	// subnet
>;
```

In this example, relu_layer is used as the subnet of max_pool_layer .

[h2 Fully Connection Layer]

For classification and regression of next layers

[!c++]
```
using fc_layer = dlib::fc<
	2,	// num_outputs
	max_pool_layer	// subnet
>;
```

In this example, max_pool_layer is used as the subnet of fc_layer .

[h2 Loss Layer]

The error loss. Less layer is the last layer of dlib nn layers.

[h3 dlib::loss_multiclass_log]

dlib::loss_multiclass_log: multiclass logistic regression loss layer.

[!c++]
```
using loss_layer = dlib::loss_multiclass_log<
	fc_layer	// subnet
>;
```

In this example, fc_layer is used as the subnet of loss_layer .

[h3 dlib::loss_mmod]

dlib::loss_mmod: Max Margin Object Object Detection Loss Layer .

[!c++]
```
using loss_layer = dlib::loss_mmod<
	con_layer	// subnet
>;
```

In this example, con_layer is used as the subnet of loss_layer .

[role blue FC-layer can be used as the subnet of layer dlib::loss_multiclass_log, but it can not be used as the subnet of layer dlib::loss_mmod.]

[h1 [role cyan cpp example]]

c++ dlib cnn example.

[h2 cpp code]

File: [_dnn.cpp]

[!c++]
```
#include <dlib/dnn.h>
#include <dlib/data_io.h>
#include <utxcpp/core.hpp>

namespace my_dnn
{

using image_type = dlib::matrix<dlib::rgb_pixel>;

using crap_net_type = dlib::loss_mmod<
	dlib::con<
		1,
		1,1,1,1,
		dlib::max_pool<
			2,2,2,2,
			dlib::relu<
				dlib::con<
					3,
					4,2,4,2,
					dlib::input<my_dnn::image_type>
				>
			>
		>
	>
>;

using label_type = typename my_dnn::crap_net_type::training_label_type;

}	// namespace mydnn

int main()
{
	utx::same_assert<my_dnn::label_type, std::vector<dlib::mmod_rect>>();

	std::vector<my_dnn::image_type> images;
	std::vector<my_dnn::label_type> labels;
	dlib::load_image_dataset(images, labels, "path/to/images/a.xml");

	dlib::mmod_options options{labels, 60, 50};
	my_dnn::crap_net_type net{options};
	dlib::dnn_trainer<my_dnn::crap_net_type> trainer{net};
	
	trainer.set_synchronization_file("./training_data.dat");

	trainer.train(images, labels);

	trainer.get_net();

	utx::print("trained net=>\n", net);
}
```

[h2 build with b2 build]

jamfile ([_jamroot])

[!c++]
```
lib dlib
	:
	:
		<name>dlib
;

exe dnn
	:
		dnn.cpp
	:
		<cxxstd>23
		<library>dlib
		<linkflags>"-lpng -ljpeg"
;
```

[h1 [role cyan See Also]]

[@http://dlib.net c++ dlib]

[@https://cppfx.xyz/utxcpp/utx_same_assert.html utx::same_assert]

[@https://cppfx.xyz/utxcpp/utx_print.html utx::print]

[@https://www.bfgroup.xyz/b2 B2 Build]



