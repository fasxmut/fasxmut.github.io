<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book xmlns:rev="http://www.cs.rpi.edu/~gregod/boost/tools/doc/revision" id="dig-botan" rev:last-revision="$Date: 2024/10/21 08:58:51 $">
  <title>Dig Botan c++</title>
  <article id="2024-10-21-01-botan-cpp-base58" rev:last-revision="$Date: 2024/10/21 08:58:51 $">
    <title>Botan c++ base58 - 2024-10-21-01</title>
    <bridgehead renderas="sect1" id="2024-10-21-01-botan-cpp-base58.h0">
      <phrase id="2024-10-21-01-botan-cpp-base58.role_cyan_botan_c_base58_2024_10"/><link linkend="2024-10-21-01-botan-cpp-base58.role_cyan_botan_c_base58_2024_10"><phrase role="cyan">Botan c++ base58 - 2024-10-21-01</phrase></link>
    </bridgehead>
    <para>
      Botan c++ base58: encode and decode - <emphasis role="bold">Dig Botan</emphasis>
    </para>
    <bridgehead renderas="sect1" id="2024-10-21-01-botan-cpp-base58.h1">
      <phrase id="2024-10-21-01-botan-cpp-base58.role_cyan_botan_base58_encode_bo"/><link linkend="2024-10-21-01-botan-cpp-base58.role_cyan_botan_base58_encode_bo"><phrase role="cyan">Botan::base58_encode, Botan::base58_decode</phrase></link>
    </bridgehead>
    <itemizedlist>
      <listitem>
        <simpara>
          Botan::base58_encode:
        </simpara>
      </listitem>
    </itemizedlist>
    <para>
      Encode a c++ u-int-8-t range to std::string.
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          Botan::base58_decode:
        </simpara>
      </listitem>
    </itemizedlist>
    <para>
      Decode base58 std::string to a c++ u-int-8-t range.
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">botan</phrase><phrase role="special">/</phrase><phrase role="identifier">base58</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">assert</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">const</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string_view</phrase> <phrase role="identifier">str</phrase> <phrase role="special">=</phrase> <phrase role="string">"No Open"</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">span</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">input</phrase><phrase role="special">{</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">bit_cast</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase> <phrase role="special">*&gt;(</phrase><phrase role="identifier">str</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">()),</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">bit_cast</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase> <phrase role="special">*&gt;(</phrase><phrase role="identifier">str</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">())</phrase>
	<phrase role="special">};</phrase>

	<phrase role="keyword">const</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">encoded</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">base58_encode</phrase><phrase role="special">(</phrase><phrase role="identifier">input</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">const</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">decoded</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">base58_decode</phrase><phrase role="special">(</phrase><phrase role="identifier">encoded</phrase><phrase role="special">);</phrase>

	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">str2</phrase><phrase role="special">{</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">bit_cast</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">const</phrase> <phrase role="keyword">char</phrase> <phrase role="special">*&gt;(</phrase><phrase role="identifier">decoded</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">()),</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">bit_cast</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">const</phrase> <phrase role="keyword">char</phrase> <phrase role="special">*&gt;(</phrase><phrase role="identifier">decoded</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">())</phrase>
	<phrase role="special">};</phrase>

	<phrase role="identifier">BOOST_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">str2</phrase> <phrase role="special">==</phrase> <phrase role="identifier">str</phrase><phrase role="special">);</phrase>

	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"input: "</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">str</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"encode, then decode: "</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">str2</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <bridgehead renderas="sect1" id="2024-10-21-01-botan-cpp-base58.h2">
      <phrase id="2024-10-21-01-botan-cpp-base58.role_cyan_botan_base58_check_enc"/><link linkend="2024-10-21-01-botan-cpp-base58.role_cyan_botan_base58_check_enc"><phrase role="cyan">Botan::base58_check_encode, Botan::base58_check_decode</phrase></link>
    </bridgehead>
    <para>
      Botan::base58_check_encode, Botan::base58_check_decode
    </para>
    <para>
      Same interfaces with Botan::base58_encode and Botan::base58_decode, but with
      checksum.
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">botan</phrase><phrase role="special">/</phrase><phrase role="identifier">base58</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">assert</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">using</phrase> <phrase role="identifier">u_8</phrase> <phrase role="special">=</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">const</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string_view</phrase> <phrase role="identifier">str</phrase> <phrase role="special">=</phrase> <phrase role="string">"No Open"</phrase><phrase role="special">;</phrase>

	<phrase role="keyword">const</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">encoded</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">base58_check_encode</phrase><phrase role="special">(</phrase>
		<phrase role="special">{</phrase> <phrase role="comment">// passed to std::span&lt;u_8&gt;</phrase>
			<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">bit_cast</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">u_8</phrase> <phrase role="special">*&gt;(</phrase><phrase role="identifier">str</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">()),</phrase>
			<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">bit_cast</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">u_8</phrase> <phrase role="special">*&gt;(</phrase><phrase role="identifier">str</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">())</phrase>
		<phrase role="special">}</phrase>
	<phrase role="special">);</phrase>

	<phrase role="keyword">const</phrase> <phrase role="keyword">auto</phrase> <phrase role="identifier">decoded</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">base58_check_decode</phrase><phrase role="special">(</phrase><phrase role="identifier">encoded</phrase><phrase role="special">);</phrase>

	<phrase role="keyword">const</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">str2</phrase><phrase role="special">{</phrase><phrase role="identifier">decoded</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">decoded</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">()};</phrase>

	<phrase role="identifier">BOOST_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">str2</phrase> <phrase role="special">==</phrase> <phrase role="identifier">str</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">static_assert</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">same_as</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="keyword">decltype</phrase><phrase role="special">(</phrase><phrase role="identifier">decoded</phrase><phrase role="special">)::</phrase><phrase role="identifier">value_type</phrase><phrase role="special">,</phrase> <phrase role="identifier">u_8</phrase><phrase role="special">&gt;);</phrase>
	<phrase role="keyword">static_assert</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">same_as</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">remove_const_t</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">decltype</phrase><phrase role="special">(</phrase><phrase role="identifier">decoded</phrase><phrase role="special">)&gt;,</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">u_8</phrase><phrase role="special">&gt;&gt;);</phrase>

	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">str</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="char">'\n'</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">encoded</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="char">'\n'</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">str2</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <para>
      Output:
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude">No Open
LT5k5M7Az1Srv5o
No Open
</programlisting>
    <bridgehead renderas="sect1" id="2024-10-21-01-botan-cpp-base58.h3">
      <phrase id="2024-10-21-01-botan-cpp-base58.role_cyan_botan"/><link linkend="2024-10-21-01-botan-cpp-base58.role_cyan_botan"><phrase role="cyan">Botan</phrase></link>
    </bridgehead>
    <para>
      Botan Home: <ulink url="https://botan.randombit.net">c++ Botan Home</ulink>
    </para>
    <para>
      This Index: <ulink url=".">Dig Botan c++</ulink>
    </para>
  </article>
  <article id="2024-10-20-02-botan-cpp-rng" rev:last-revision="$Date: 2024/10/21 08:58:51 $">
    <title>Botan c++ rng - 2024-10-20-02</title>
    <bridgehead renderas="sect1" id="2024-10-20-02-botan-cpp-rng.h0">
      <phrase id="2024-10-20-02-botan-cpp-rng.role_cyan_botan_c_rng_2024_10_20"/><link linkend="2024-10-20-02-botan-cpp-rng.role_cyan_botan_c_rng_2024_10_20"><phrase role="cyan">Botan c++ rng - 2024-10-20-02</phrase></link>
    </bridgehead>
    <para>
      Botan c++ RNG: Random Number Generator - <emphasis role="bold">Dig Botan</emphasis>
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          Botan RNG (Botan::AutoSeeded_RNG)
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Botan Entropy
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Botan::ChaCha_RNG
        </simpara>
      </listitem>
    </itemizedlist>
    <bridgehead renderas="sect1" id="2024-10-20-02-botan-cpp-rng.h1">
      <phrase id="2024-10-20-02-botan-cpp-rng.role_cyan_first_meet_botan_rng"/><link linkend="2024-10-20-02-botan-cpp-rng.role_cyan_first_meet_botan_rng"><phrase role="cyan">First meet Botan RNG</phrase></link>
    </bridgehead>
    <para>
      Randomize a vector with it.
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">botan</phrase><phrase role="special">/</phrase><phrase role="identifier">auto_rng</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">span</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">AutoSeeded_RNG</phrase> <phrase role="identifier">rng</phrase><phrase role="special">;</phrase>
	<phrase role="special">{</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">vector</phrase><phrase role="special">(</phrase><phrase role="number">16</phrase><phrase role="special">);</phrase>
		<phrase role="identifier">rng</phrase><phrase role="special">.</phrase><phrase role="identifier">randomize</phrase><phrase role="special">(</phrase><phrase role="identifier">vector</phrase><phrase role="special">);</phrase>
		<phrase role="keyword">for</phrase> <phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">:</phrase> <phrase role="identifier">vector</phrase><phrase role="special">)</phrase>
			<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="char">' '</phrase><phrase role="special">;</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">auto</phrase> <phrase role="identifier">vector</phrase> <phrase role="special">=</phrase> <phrase role="identifier">rng</phrase><phrase role="special">.</phrase><phrase role="identifier">random_vec</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;&gt;(</phrase><phrase role="number">16</phrase><phrase role="special">);</phrase>
		<phrase role="keyword">for</phrase> <phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">:</phrase> <phrase role="identifier">vector</phrase><phrase role="special">)</phrase>
			<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="char">' '</phrase><phrase role="special">;</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <bridgehead renderas="sect1" id="2024-10-20-02-botan-cpp-rng.h2">
      <phrase id="2024-10-20-02-botan-cpp-rng.role_cyan_add_entropy"/><link linkend="2024-10-20-02-botan-cpp-rng.role_cyan_add_entropy"><phrase role="cyan">Add entropy</phrase></link>
    </bridgehead>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">botan</phrase><phrase role="special">/</phrase><phrase role="identifier">auto_rng</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">auto</phrase> <phrase role="identifier">rng</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">AutoSeeded_RNG</phrase><phrase role="special">{};</phrase>
	<phrase role="identifier">rng</phrase><phrase role="special">.</phrase><phrase role="identifier">add_entropy</phrase><phrase role="special">(</phrase><phrase role="identifier">rng</phrase><phrase role="special">.</phrase><phrase role="identifier">random_vec</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;&gt;(</phrase><phrase role="number">1024</phrase><phrase role="special">));</phrase>
	<phrase role="keyword">auto</phrase> <phrase role="identifier">vector</phrase> <phrase role="special">=</phrase> <phrase role="identifier">rng</phrase><phrase role="special">.</phrase><phrase role="identifier">random_vec</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;&gt;(</phrase><phrase role="number">16</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">:</phrase> <phrase role="identifier">vector</phrase><phrase role="special">)</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="char">' '</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <bridgehead renderas="sect1" id="2024-10-20-02-botan-cpp-rng.h3">
      <phrase id="2024-10-20-02-botan-cpp-rng.role_cyan_use_std_shared_ptr"/><link linkend="2024-10-20-02-botan-cpp-rng.role_cyan_use_std_shared_ptr"><phrase role="cyan">use std::shared_ptr</phrase></link>
    </bridgehead>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">botan</phrase><phrase role="special">/</phrase><phrase role="identifier">auto_rng</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">shared_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">RandomNumberGenerator</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">rng</phrase> <phrase role="special">=</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">make_shared</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">AutoSeeded_RNG</phrase><phrase role="special">&gt;();</phrase>
	<phrase role="identifier">rng</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">add_entropy</phrase><phrase role="special">(</phrase><phrase role="identifier">rng</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">random_vec</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;&gt;(</phrase><phrase role="number">1024</phrase><phrase role="special">));</phrase>
	<phrase role="keyword">auto</phrase> <phrase role="identifier">vector</phrase> <phrase role="special">=</phrase> <phrase role="identifier">rng</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">random_vec</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;&gt;(</phrase><phrase role="number">32</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">:</phrase> <phrase role="identifier">vector</phrase><phrase role="special">)</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <bridgehead renderas="sect1" id="2024-10-20-02-botan-cpp-rng.h4">
      <phrase id="2024-10-20-02-botan-cpp-rng.role_cyan_entropy_source"/><link linkend="2024-10-20-02-botan-cpp-rng.role_cyan_entropy_source"><phrase role="cyan">Entropy Source</phrase></link>
    </bridgehead>
    <bridgehead renderas="sect2" id="2024-10-20-02-botan-cpp-rng.h5">
      <phrase id="2024-10-20-02-botan-cpp-rng.hardware_entropy"/><link linkend="2024-10-20-02-botan-cpp-rng.hardware_entropy">Hardware
      Entropy</link>
    </bridgehead>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">botan</phrase><phrase role="special">/</phrase><phrase role="identifier">auto_rng</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">botan</phrase><phrase role="special">/</phrase><phrase role="identifier">entropy_src</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">namespace</phrase> <phrase role="identifier">cpp_space</phrase>
<phrase role="special">{</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">my_entropy</phrase><phrase role="special">:</phrase>
	<phrase role="keyword">public</phrase> <phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">Entropy_Source</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">name</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">override</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">return</phrase> <phrase role="string">"cpp_space::my_entropy"</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">poll</phrase><phrase role="special">(</phrase><phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">RandomNumberGenerator</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">rng</phrase><phrase role="special">)</phrase> <phrase role="identifier">override</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">auto</phrase> <phrase role="identifier">entropy</phrase> <phrase role="special">=</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;(</phrase><phrase role="number">2048</phrase><phrase role="special">);</phrase>
		<phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">make_hardware_entropy</phrase><phrase role="special">(</phrase><phrase role="identifier">entropy</phrase><phrase role="special">);</phrase>
		<phrase role="keyword">return</phrase> <phrase role="identifier">entropy</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">*</phrase> <phrase role="number">8</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
<phrase role="keyword">protected</phrase><phrase role="special">:</phrase>
	<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">ranges</phrase><phrase role="special">::</phrase><phrase role="identifier">range</phrase> <phrase role="identifier">range_t10</phrase><phrase role="special">&gt;</phrase>
		<phrase role="identifier">requires</phrase>
			<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">same_as</phrase><phrase role="special">&lt;</phrase>
				<phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">remove_cvref_t</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">range_t10</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">value_type</phrase><phrase role="special">,</phrase>
				<phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase>
			<phrase role="special">&gt;</phrase>
	<phrase role="keyword">void</phrase> <phrase role="identifier">make_hardware_entropy</phrase><phrase role="special">(</phrase><phrase role="identifier">range_t10</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">r__</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase>
	<phrase role="special">{</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">fill</phrase><phrase role="special">(</phrase><phrase role="identifier">r__</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">r__</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">(),</phrase> <phrase role="number">0x42</phrase><phrase role="special">);</phrase>
	<phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="special">}</phrase>	<phrase role="comment">// namespace cpp_space</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">auto</phrase> <phrase role="identifier">esrc</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">Entropy_Sources</phrase><phrase role="special">{};</phrase>
	<phrase role="identifier">esrc</phrase><phrase role="special">.</phrase><phrase role="identifier">add_source</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">make_unique</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">cpp_space</phrase><phrase role="special">::</phrase><phrase role="identifier">my_entropy</phrase><phrase role="special">&gt;());</phrase>
	<phrase role="identifier">esrc</phrase><phrase role="special">.</phrase><phrase role="identifier">add_source</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">make_unique</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">cpp_space</phrase><phrase role="special">::</phrase><phrase role="identifier">my_entropy</phrase><phrase role="special">&gt;());</phrase>	<phrase role="comment">// add another entropy for this demo.</phrase>
	<phrase role="keyword">auto</phrase> <phrase role="identifier">rng</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">AutoSeeded_RNG</phrase><phrase role="special">{</phrase><phrase role="identifier">esrc</phrase><phrase role="special">};</phrase>
	<phrase role="keyword">auto</phrase> <phrase role="identifier">vector</phrase> <phrase role="special">=</phrase> <phrase role="identifier">rng</phrase><phrase role="special">.</phrase><phrase role="identifier">random_vec</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;&gt;(</phrase><phrase role="number">32</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">:</phrase> <phrase role="identifier">vector</phrase><phrase role="special">)</phrase>	<phrase role="comment">// converted to int</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="char">' '</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <bridgehead renderas="sect2" id="2024-10-20-02-botan-cpp-rng.h6">
      <phrase id="2024-10-20-02-botan-cpp-rng.time_entropy"/><link linkend="2024-10-20-02-botan-cpp-rng.time_entropy">Time
      Entropy</link>
    </bridgehead>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">botan</phrase><phrase role="special">/</phrase><phrase role="identifier">auto_rng</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">botan</phrase><phrase role="special">/</phrase><phrase role="identifier">entropy_src</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">chrono</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">time_entropy</phrase><phrase role="special">:</phrase>
	<phrase role="keyword">public</phrase> <phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">Entropy_Source</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="keyword">using</phrase> <phrase role="identifier">uint_type</phrase> <phrase role="special">=</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="keyword">long</phrase> <phrase role="keyword">long</phrase><phrase role="special">;</phrase>
<phrase role="keyword">protected</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">uint_type</phrase> <phrase role="identifier">slow_counter</phrase><phrase role="special">{</phrase><phrase role="number">0</phrase><phrase role="special">};</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">name</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">override</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">return</phrase> <phrase role="string">"time_entropy"</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">poll</phrase><phrase role="special">(</phrase><phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">RandomNumberGenerator</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">rng</phrase><phrase role="special">)</phrase> <phrase role="identifier">override</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">const</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">expected</phrase> <phrase role="special">=</phrase> <phrase role="number">256</phrase><phrase role="special">;</phrase>
		<phrase role="keyword">for</phrase> <phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">i</phrase><phrase role="special">=</phrase><phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">i</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">expected</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase>
		<phrase role="special">{</phrase>
		<phrase role="comment">////////////////////////////////////////</phrase>
		<phrase role="comment">// This time based algorithm comes from botan src examples,</phrase>
		<phrase role="comment">// I add a new variable slow_counter to it.</phrase>
			<phrase role="identifier">uint_type</phrase> <phrase role="identifier">now</phrase> <phrase role="special">=</phrase> <phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">get_now_as_nano</phrase><phrase role="special">();</phrase>
			<phrase role="identifier">uint_type</phrase> <phrase role="identifier">counter</phrase><phrase role="special">{</phrase><phrase role="number">0</phrase><phrase role="special">};</phrase>
			<phrase role="keyword">while</phrase> <phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">get_now_as_nano</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">now</phrase><phrase role="special">)</phrase>
			<phrase role="special">{</phrase>
				<phrase role="special">++</phrase><phrase role="identifier">slow_counter</phrase><phrase role="special">;</phrase>
				<phrase role="special">++</phrase><phrase role="identifier">counter</phrase><phrase role="special">;</phrase>
			<phrase role="special">}</phrase>
			<phrase role="identifier">rng</phrase><phrase role="special">.</phrase><phrase role="identifier">add_entropy_T</phrase><phrase role="special">(</phrase><phrase role="identifier">now</phrase><phrase role="special">);</phrase>
			<phrase role="identifier">rng</phrase><phrase role="special">.</phrase><phrase role="identifier">add_entropy_T</phrase><phrase role="special">(</phrase><phrase role="identifier">counter</phrase><phrase role="special">);</phrase>
		<phrase role="comment">////////////////////////////////////////</phrase>
			<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"now timer: "</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">now</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">", counter: "</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">counter</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
		<phrase role="special">}</phrase>
		<phrase role="keyword">return</phrase> <phrase role="identifier">expected</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
<phrase role="keyword">protected</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">uint_type</phrase> <phrase role="identifier">get_now_as_nano</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">using</phrase> <phrase role="identifier">clock_type</phrase> <phrase role="special">=</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">chrono</phrase><phrase role="special">::</phrase><phrase role="identifier">high_resolution_clock</phrase><phrase role="special">;</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">chrono</phrase><phrase role="special">::</phrase><phrase role="identifier">time_point</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">clock_type</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">now</phrase><phrase role="special">;</phrase>
		<phrase role="identifier">now</phrase> <phrase role="special">=</phrase> <phrase role="identifier">clock_type</phrase><phrase role="special">::</phrase><phrase role="identifier">now</phrase><phrase role="special">();</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">chrono</phrase><phrase role="special">::</phrase><phrase role="identifier">duration</phrase> <phrase role="identifier">now_duration</phrase> <phrase role="special">=</phrase> <phrase role="identifier">now</phrase><phrase role="special">.</phrase><phrase role="identifier">time_since_epoch</phrase><phrase role="special">();</phrase>
		<phrase role="keyword">return</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">chrono</phrase><phrase role="special">::</phrase><phrase role="identifier">duration_cast</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">chrono</phrase><phrase role="special">::</phrase><phrase role="identifier">nanoseconds</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">now_duration</phrase><phrase role="special">).</phrase><phrase role="identifier">count</phrase><phrase role="special">();</phrase>
	<phrase role="special">}</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="special">~</phrase><phrase role="identifier">time_entropy</phrase><phrase role="special">()</phrase>
	<phrase role="special">{</phrase>
		<phrase role="comment">// Print slow_counter on destructor.</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"slow_counter: "</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">slow_counter</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">auto</phrase> <phrase role="identifier">entropy_src</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">Entropy_Sources</phrase><phrase role="special">{};</phrase>
	<phrase role="identifier">entropy_src</phrase><phrase role="special">.</phrase><phrase role="identifier">add_source</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">make_unique</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">time_entropy</phrase><phrase role="special">&gt;());</phrase>
	<phrase role="keyword">auto</phrase> <phrase role="identifier">rng</phrase> <phrase role="special">=</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">make_shared</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">AutoSeeded_RNG</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">entropy_src</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">auto</phrase> <phrase role="identifier">vector</phrase> <phrase role="special">=</phrase> <phrase role="identifier">rng</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">random_vec</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;&gt;(</phrase><phrase role="number">32</phrase><phrase role="special">);</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"RNG Numbers:\n"</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">:</phrase> <phrase role="identifier">vector</phrase><phrase role="special">)</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="char">' '</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <bridgehead renderas="sect1" id="2024-10-20-02-botan-cpp-rng.h7">
      <phrase id="2024-10-20-02-botan-cpp-rng.role_cyan_botan_chacha_rng"/><link linkend="2024-10-20-02-botan-cpp-rng.role_cyan_botan_chacha_rng"><phrase role="cyan">Botan::ChaCha_RNG</phrase></link>
    </bridgehead>
    <bridgehead renderas="sect2" id="2024-10-20-02-botan-cpp-rng.h8">
      <phrase id="2024-10-20-02-botan-cpp-rng.this_constructor_construct_with_"/><link linkend="2024-10-20-02-botan-cpp-rng.this_constructor_construct_with_">This
      constructor: construct with seed</link>
    </bridgehead>
    <para>
      The seed is an unsigned char range, it can be Lvalue or Rvalue, the size must
      be greater than 256 bits.
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">botan</phrase><phrase role="special">/</phrase><phrase role="identifier">chacha_rng</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">botan</phrase><phrase role="special">/</phrase><phrase role="identifier">auto_rng</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="comment">// Requires seed.size() * sizeof (unsigned char) &gt;= 256</phrase>
	<phrase role="keyword">auto</phrase> <phrase role="identifier">seed</phrase> <phrase role="special">=</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;(</phrase><phrase role="number">100</phrase><phrase role="special">);</phrase>
	<phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">AutoSeeded_RNG</phrase><phrase role="special">{}.</phrase><phrase role="identifier">randomize</phrase><phrase role="special">(</phrase><phrase role="identifier">seed</phrase><phrase role="special">);</phrase>

	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">shared_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">RandomNumberGenerator</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">rng</phrase> <phrase role="special">=</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">make_shared</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">ChaCha_RNG</phrase><phrase role="special">&gt;(</phrase>
			<phrase role="identifier">seed</phrase>	<phrase role="comment">// can be Lvalue or Rvalue</phrase>
		<phrase role="special">);</phrase>

	<phrase role="keyword">auto</phrase> <phrase role="identifier">vector</phrase> <phrase role="special">=</phrase> <phrase role="identifier">rng</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">random_vec</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;&gt;(</phrase><phrase role="number">32</phrase><phrase role="special">);</phrase>

	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">:</phrase> <phrase role="identifier">vector</phrase><phrase role="special">)</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="char">' '</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <bridgehead renderas="sect2" id="2024-10-20-02-botan-cpp-rng.h9">
      <phrase id="2024-10-20-02-botan-cpp-rng.this_constructor_construct_with0"/><link linkend="2024-10-20-02-botan-cpp-rng.this_constructor_construct_with0">This
      constructor: construct with RNG</link>
    </bridgehead>
    <para>
      The rng passed to constructor must be Lvalue.
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">botan</phrase><phrase role="special">/</phrase><phrase role="identifier">chacha_rng</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">botan</phrase><phrase role="special">/</phrase><phrase role="identifier">auto_rng</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">auto</phrase> <phrase role="identifier">seed_rng</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">AutoSeeded_RNG</phrase><phrase role="special">{};</phrase>

	<phrase role="comment">// the rng used as seed passed to the constructor must be Lvalue.</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">shared_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">RandomNumberGenerator</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">rng</phrase> <phrase role="special">=</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">make_shared</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">ChaCha_RNG</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">seed_rng</phrase><phrase role="special">);</phrase>

	<phrase role="keyword">auto</phrase> <phrase role="identifier">vector</phrase> <phrase role="special">=</phrase> <phrase role="identifier">rng</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">random_vec</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;&gt;(</phrase><phrase role="number">32</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">:</phrase> <phrase role="identifier">vector</phrase><phrase role="special">)</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="char">' '</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <bridgehead renderas="sect2" id="2024-10-20-02-botan-cpp-rng.h10">
      <phrase id="2024-10-20-02-botan-cpp-rng.this_constructor_construct_with1"/><link linkend="2024-10-20-02-botan-cpp-rng.this_constructor_construct_with1">This
      constructor: construct with entropy</link>
    </bridgehead>
    <para>
      The entropy passed to the constructor must be Lvalue.
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">botan</phrase><phrase role="special">/</phrase><phrase role="identifier">chacha_rng</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">botan</phrase><phrase role="special">/</phrase><phrase role="identifier">entropy_src</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">namespace</phrase> <phrase role="identifier">cpp_space</phrase>
<phrase role="special">{</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">my_entropy</phrase><phrase role="special">:</phrase>
	<phrase role="keyword">public</phrase> <phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">Entropy_Source</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">name</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">override</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">return</phrase> <phrase role="string">"cpp_space::my_entropy"</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">poll</phrase><phrase role="special">(</phrase><phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">RandomNumberGenerator</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">rng</phrase><phrase role="special">)</phrase> <phrase role="identifier">override</phrase>
	<phrase role="special">{</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">entro</phrase><phrase role="special">(</phrase><phrase role="number">1024</phrase><phrase role="special">);</phrase>
		<phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">make_hardware_entropy</phrase><phrase role="special">(</phrase><phrase role="identifier">entro</phrase><phrase role="special">);</phrase>
		<phrase role="identifier">rng</phrase><phrase role="special">.</phrase><phrase role="identifier">add_entropy</phrase><phrase role="special">(</phrase><phrase role="identifier">entro</phrase><phrase role="special">);</phrase>
		<phrase role="keyword">return</phrase> <phrase role="identifier">entro</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">*</phrase> <phrase role="keyword">sizeof</phrase> <phrase role="special">(</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">);</phrase>
	<phrase role="special">}</phrase>
<phrase role="keyword">protected</phrase><phrase role="special">:</phrase>
	<phrase role="keyword">void</phrase> <phrase role="identifier">make_hardware_entropy</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">entro</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase>
	<phrase role="special">{</phrase>
		<phrase role="comment">// Memory Fill</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">fill</phrase><phrase role="special">(</phrase><phrase role="identifier">entro</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">entro</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">(),</phrase> <phrase role="number">0x42</phrase><phrase role="special">);</phrase>
	<phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="special">}</phrase>	<phrase role="comment">// namespace cpp_space</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">auto</phrase> <phrase role="identifier">src</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">Entropy_Sources</phrase><phrase role="special">{};</phrase>
	<phrase role="identifier">src</phrase><phrase role="special">.</phrase><phrase role="identifier">add_source</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">make_unique</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">cpp_space</phrase><phrase role="special">::</phrase><phrase role="identifier">my_entropy</phrase><phrase role="special">&gt;());</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">shared_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">RandomNumberGenerator</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">rng</phrase> <phrase role="special">=</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">make_shared</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">ChaCha_RNG</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">src</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">auto</phrase> <phrase role="identifier">vector</phrase> <phrase role="special">=</phrase> <phrase role="identifier">rng</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">random_vec</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;&gt;(</phrase><phrase role="number">32</phrase><phrase role="special">);</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"cha cha rng numbers:\n"</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">:</phrase> <phrase role="identifier">vector</phrase><phrase role="special">)</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="char">' '</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <bridgehead renderas="sect2" id="2024-10-20-02-botan-cpp-rng.h11">
      <phrase id="2024-10-20-02-botan-cpp-rng.this_constructor_construct_with2"/><link linkend="2024-10-20-02-botan-cpp-rng.this_constructor_construct_with2">This
      constructor: construct with RNG and entropy sources</link>
    </bridgehead>
    <para>
      Both the rng and entropy-sources passed to the constructor must be Lvalue.
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">botan</phrase><phrase role="special">/</phrase><phrase role="identifier">chacha_rng</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">botan</phrase><phrase role="special">/</phrase><phrase role="identifier">entropy_src</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">botan</phrase><phrase role="special">/</phrase><phrase role="identifier">auto_rng</phrase><phrase role="special">.</phrase><phrase role="identifier">h</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">namespace</phrase> <phrase role="identifier">cpp_space</phrase>
<phrase role="special">{</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">my_entropy</phrase><phrase role="special">:</phrase>
	<phrase role="keyword">public</phrase> <phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">Entropy_Source</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">name</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">override</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">return</phrase> <phrase role="string">"cpp_space::my_entropy"</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">poll</phrase><phrase role="special">(</phrase><phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">RandomNumberGenerator</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">rng</phrase><phrase role="special">)</phrase> <phrase role="identifier">override</phrase>
	<phrase role="special">{</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">entro</phrase><phrase role="special">(</phrase><phrase role="number">1024</phrase><phrase role="special">);</phrase>
		<phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">make_hardware_entropy</phrase><phrase role="special">(</phrase><phrase role="identifier">entro</phrase><phrase role="special">);</phrase>
		<phrase role="identifier">rng</phrase><phrase role="special">.</phrase><phrase role="identifier">add_entropy</phrase><phrase role="special">(</phrase><phrase role="identifier">entro</phrase><phrase role="special">);</phrase>
		<phrase role="keyword">return</phrase> <phrase role="identifier">entro</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">*</phrase> <phrase role="keyword">sizeof</phrase> <phrase role="special">(</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">);</phrase>
	<phrase role="special">}</phrase>
<phrase role="keyword">protected</phrase><phrase role="special">:</phrase>
	<phrase role="keyword">void</phrase> <phrase role="identifier">make_hardware_entropy</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">entro</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase>
	<phrase role="special">{</phrase>
		<phrase role="comment">// Memory Fill</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">fill</phrase><phrase role="special">(</phrase><phrase role="identifier">entro</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">entro</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">(),</phrase> <phrase role="number">0x42</phrase><phrase role="special">);</phrase>
	<phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="special">}</phrase>	<phrase role="comment">// namespace cpp_space</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">auto</phrase> <phrase role="identifier">entropies</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">Entropy_Sources</phrase><phrase role="special">{};</phrase>
	<phrase role="identifier">entropies</phrase><phrase role="special">.</phrase><phrase role="identifier">add_source</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">make_unique</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">cpp_space</phrase><phrase role="special">::</phrase><phrase role="identifier">my_entropy</phrase><phrase role="special">&gt;());</phrase>
	<phrase role="keyword">auto</phrase> <phrase role="identifier">auto_rng</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">AutoSeeded_RNG</phrase><phrase role="special">{};</phrase>

	<phrase role="keyword">auto</phrase> <phrase role="identifier">rng</phrase> <phrase role="special">=</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">shared_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">RandomNumberGenerator</phrase><phrase role="special">&gt;{};</phrase>
	<phrase role="identifier">rng</phrase> <phrase role="special">=</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">make_shared</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Botan</phrase><phrase role="special">::</phrase><phrase role="identifier">ChaCha_RNG</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">auto_rng</phrase><phrase role="special">,</phrase> <phrase role="identifier">entropies</phrase><phrase role="special">);</phrase>

	<phrase role="keyword">auto</phrase> <phrase role="identifier">vector</phrase> <phrase role="special">=</phrase> <phrase role="identifier">rng</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">random_vec</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">char</phrase><phrase role="special">&gt;&gt;(</phrase><phrase role="number">31</phrase><phrase role="special">);</phrase>

	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"Botan::ChaCha_RNG:\n"</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">:</phrase> <phrase role="identifier">vector</phrase><phrase role="special">)</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="char">' '</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <bridgehead renderas="sect1" id="2024-10-20-02-botan-cpp-rng.h12">
      <phrase id="2024-10-20-02-botan-cpp-rng.role_cyan_botan"/><link linkend="2024-10-20-02-botan-cpp-rng.role_cyan_botan"><phrase role="cyan">Botan</phrase></link>
    </bridgehead>
    <para>
      Botan Home: <ulink url="https://botan.randombit.net">c++ Botan Home</ulink>
    </para>
    <para>
      This Index: <ulink url=".">Dig Botan c++</ulink>
    </para>
  </article>
  <article id="2024-10-20-01-botan-cpp-tls-https" rev:last-revision="$Date: 2024/10/21 08:58:51 $">
    <title>Botan c++ tls https - 2024-10-20-01</title>
    <bridgehead renderas="sect1" id="2024-10-20-01-botan-cpp-tls-https.h0">
      <phrase id="2024-10-20-01-botan-cpp-tls-https.role_cyan_botan_c_tls_https_2024"/><link linkend="2024-10-20-01-botan-cpp-tls-https.role_cyan_botan_c_tls_https_2024"><phrase role="cyan">Botan c++ tls https - 2024-10-20-01</phrase></link>
    </bridgehead>
    <para>
      c++ botan tls https - <emphasis role="bold">Dig Botan</emphasis>
    </para>
    <para>
      Read here: <ulink url="https://cppfx.xyz/silice/cpp-botan-tls-boost-asio-beast-client.html">c++
      botan tls + boost asio beast (https client)</ulink>
    </para>
    <bridgehead renderas="sect1" id="2024-10-20-01-botan-cpp-tls-https.h1">
      <phrase id="2024-10-20-01-botan-cpp-tls-https.role_cyan_botan"/><link linkend="2024-10-20-01-botan-cpp-tls-https.role_cyan_botan"><phrase role="cyan">Botan</phrase></link>
    </bridgehead>
    <para>
      Botan Home: <ulink url="https://botan.randombit.net">c++ Botan Home</ulink>
    </para>
    <para>
      This Index: <ulink url=".">Dig Botan c++</ulink>
    </para>
  </article>
  <bridgehead renderas="sect2" id="dig-botan.h0">
    <phrase id="dig-botan.about"/><link linkend="dig-botan.about">About</link>
  </bridgehead>
  <para>
    Dig Botan c++ code.
  </para>
  <bridgehead renderas="sect2" id="dig-botan.h1">
    <phrase id="dig-botan.botan"/><link linkend="dig-botan.botan">Botan</link>
  </bridgehead>
  <para>
    c++ Botan Home: <ulink url="https://botan.randombit.net">https://botan.randombit.net</ulink>
  </para>
  <bridgehead renderas="sect2" id="dig-botan.h2">
    <phrase id="dig-botan.cppfx"/><link linkend="dig-botan.cppfx">cppfx</link>
  </bridgehead>
  <para>
    Here: <ulink url=".">Dig Botan c++</ulink>
  </para>
  <para>
    cppfx Home: <ulink url="https://cppfx.xyz">https://cppfx.xyz</ulink>
  </para>
</book>
